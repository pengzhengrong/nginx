介绍
	cgi 
		cgi 是一个协议，描述的是web服务器（Nginx）和应用程序网关（php，python）等之间的信息交换
		cgi 存在3个不足
			(1) 每个请求产生唯一的进程，一个请求到另外一个请求，内存和其他的信息将会全部丢失
			(2) 开启一个线程会消耗系统的资源，大而且并发的请求很快可以使服务瘫痪
			(3) 很难设计一个架构把web服务器和应用程序网管放在不同的服务器
	fastcgi
		对cgi的改进
			(1) 能够处理多个请求的持续进程
			(2) web服务器和应用程序网关通过TCP套接字，因此2个进程可以在不同的服务器
			(3) 单个连接接收响应，其他的请求也可以跟进，因此不需要为其他的请求建立连接
			(4) fastcgi是一个基于套接字的协议，能够适应任何平台和变成语言
			
指令
	fastcgi_pass 指定什么请求应该传递给fastcgi服务
		3种形式
			1. 针对TCP： fastcgi_pass IP:PORT;   eg: fastcgi_pass 127.0.0.1:8080;
			2. 针对UNIX ： fastcgi_pass unix:/path/to/fastcgi.socket;
			3. fastcgi_pass myblock;  eg: fastcgi_pass upstream_name;
				location ~* \.php${
					fastcgi_pass phpfpm;
				}
				upstream phpfpm{
					server 127.0.0.1:19001;
					server 127.0.0.1:19002;
				}
	fastcgi_param 允许配置传递给fastcgi服务器请求
		有两个参数是必须的：
			1. SCRIPT_FILENAME 和 QUERY_STRING
				eg: 
		        location /siege.php {
		                fastcgi_pass   phpfpm;
		                fastcgi_index  index.php;
		                fastcgi_param  SCRIPT_FILENAME  /home/xuanwen/sites/api.xw.feedss.com/webroot$fastcgi_script_name;
		                include        fastcgi_params;
		        }
				fastcgi_params 文件：
					fastcgi_param  QUERY_STRING       $query_string;
					fastcgi_param  REQUEST_METHOD     $request_method;
					fastcgi_param  CONTENT_TYPE       $content_type;
					fastcgi_param  CONTENT_LENGTH     $content_length;
					
					fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
					fastcgi_param  REQUEST_URI        $request_uri;
					fastcgi_param  DOCUMENT_URI       $document_uri;
					fastcgi_param  DOCUMENT_ROOT      $document_root;
					fastcgi_param  SERVER_PROTOCOL    $server_protocol;
					fastcgi_param  HTTPS              $https if_not_empty;
					
					fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
					fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
					
					fastcgi_param  REMOTE_ADDR        $remote_addr;
					fastcgi_param  REMOTE_PORT        $remote_port;
					fastcgi_param  SERVER_ADDR        $server_addr;
					fastcgi_param  SERVER_PORT        $server_port;
					fastcgi_param  SERVER_NAME        $server_name;
					
					# PHP only, required if PHP was built with --enable-force-cgi-redirect
					fastcgi_param  REDIRECT_STATUS    200;
	fastcgi_index : fastcgi不支持自动目录索引，如果访问的地址以/结尾将会自动加上index.php			
	fastcgi_pass_header : 指定传递到fastcgi服务器额外的头部信息
	fastcgi_hide_header : 指定fastcgi 应该隐藏的头部信息
	fastcgi_connect_timeout 连接超时时间。如果Nginx已经连接到后台服务器，那么这个失效
	fastcgi_send_timeout 两个写操作之间的时间
	fastcgi_store : 提供一个简单的缓存存储，用于存储fastcgi的响应。如果fastcgi已经处理过的uri可以转发fastcgi而从缓存中获取。
	fastcgi_temp_path : 设置临时文件 和 缓存文件的路径
	fastcgi_max_temp_file_size : 指定临时文件的最大值 0表示禁用，默认1G
	fastcgi_temp_file_write_size : 设置写缓冲区
	fastcgi_buffer : 这是缓冲区的数量和大小
	fastcgi_buffer_size : 缓冲区大小设置
	fastcgi_next_upstream : 请求被抛弃并重新发送到下一个upstream服务区的情况
	fastcgi_cache_valid : 对各种不同的响应代码定义不同的缓存时间
	fastcgi_cache_path : 存储缓存文件的目录
		fastcgi_cache_path [levels=numbers keys_zone=name:size inactive=time max_size=size];
		levels : 指定子目录的深度
		keys_zone 指定之前定义的fastcgi_cache 名称，并且可以指定缓存的大小
		inactive : 缓存指定时间没有被使用，那么将删除。
		max_size ： 定义整个缓存的最大值
	fastcgi_cache_min_uses : 定义一个请求有资格缓存之前被击中的最少次数。
	fastcgi_cache : 定义一个cache区域zone，对区域zone定义标志是为了进一步在其他指令使用
	fastcgi_cache_key : 定义缓存key。
	fastcgi_cache_methods : 默认的为get和head
	fastcgi_cache_use_stale : 定义Nginx在某些情况下，是否提供过期的缓存。
		fastcgi_cache_stale [updating] [error] [timeout] [invalid_header] [http_500]
	
	fastcgi_cache 文件 可以作为通用而include
		fastcgi_cache phpcache;
		fastcgi_cache_key "$scheme$host$request_uri"; # 还可以加上请求参数用来区分不同的请求 request_uri（包含请求参数）
		fastcgi_cache_min_uses 2; # 击中，将由缓存的响应来提供请求。
		fastcgi_cache_path /tmp/cache levles=1:2 keys_zone=phpcache:10m inactive=30m max_size=500M; 
		fastcgi_cache_use_stale updating timeout;
		fastcgi_cache_valid 404 1m;
		fastcgi_cache_valid 500 502 504 505 5m;
	
	server{
		server_name hello2world.top;
		location ~* \.php${
			fastcgi_pass 127.0.0.1:19001;
			fastcgi_param SCRIPT_FILENAME /home/pzr/git/hello2world$fastcgi_script_name;
			fastcgi_param PATH_INFO $fastcgi_script_name;
				#PATH_INFO 是在fastcgi_split_path_info 中的，如果url 
				#fastcgi_split_path_info ^(.+\.php)(.*)$; url= index.php/param1/param2 param1/param2 能够进一步供定义使用  
			include fastcgi_param;
			include fastcgi_cache;
		}
	}
	
upstream
	upstream phpfpm{
		ip_hash;
		server 192.168.0.50:9000;
		server 192.168.0.51:9000;
		server 192.168.0.52:9000 weight=2;
	}
	一个请求可能被发到不同服务器，从而用户的信息可能会丢失。可以采用 ip_hash 命令
	这个命令可以通过ip作为hash 请求服务器。然而用户可能会更改hash，因此不是最好的办法。
	如果使用了ip_hash 那么weight 会失效。
	max_fails=n 定义可以发生通信错误的最大次数，在faile_timeout 时间内。如果条件触发，那么将会使这个服务器不再起作用
	fail_timeout=n 定义一个时间限制和在时间限制内的错误数
	down 将后台服务器标记为down，从而不再使用该服务器。仅在ip_hash指令的情况下。
	backup 标记一个后端服务器作为备份服务器。
	
fpm -->fastcgi php mamage 
	fpm 将fastcgi带到了一个新的高度 


	
	
	
	
	 
				
				
				